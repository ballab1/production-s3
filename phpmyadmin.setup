#!/bin/bash

#############################################################################
#
#   initialization for phpmyadmin
#
#############################################################################

[ "${CONFIG_DIR:-}" ] || CONFIG_DIR="$(pwd)"
[ "${WORKSPACE_DIR:-}" ] || WORKSPACE_DIR="$(pwd)/workspace.$(basename "$CONFIG_DIR")"

declare -r config_dir="${CONFIG_DIR:?}/phpmyadmin"
declare -r workspace_dir="${WORKSPACE_DIR:?}/phpmyadmin"


declare isIinitialized="$(basename "${BASH_SOURCE[0]}")"
isIinitialized="${workspace_dir}/.${isIinitialized%.*}.init"
if [ ! -f "$isIinitialized" ]; then

    # perform initialization 
    mkdir -p "$workspace_dir" ||: 

    declare dumps_dir="${WORKSPACE_DIR}/mysql/loader/dumps"
    if [ ! -e "${dumps_dir}/phpmyadmin.sql" ]; then
        mkdir -p "$dumps_dir" ||:
        cp "${config_dir}"/*.sql "${dumps_dir}/"
    fi 


    # update dbms access for phpmyadmin
    declare -r mysql_root_password="$(deploy.passwordSecret 'mysql' 'MYSQL_ROOT_PASSWORD' )"
    declare -r pma_pass="$(deploy.passwordSecret 'phpmyadmin' 'PMA_PASSWORD' )"

    # update dbms access for phpmyadmin
    declare dc_json="$(lib.yamlToJson "${WORKSPACE_DIR}/docker-compose.yml")"
    declare pma_user=$(jq --compact-output --monochrome-output --raw-output '.services.phpmyadmin.environment.PMA_USER' <<< "$dc_json")
    pma_user="$(eval echo "$pma_user")"

    if [ "${pma_dbuser:-null}" != 'null' ] && [ "${pma_dbpass:-}" ]; then
        cat <<-PMA_USER > "${WORKSPACE_DIR}/mysql/loader/phpmyadmin_user.sh"
#!/bin/bash

cat <<-EOSQL | mysql -uroot -p${mysql_root_password} -hlocalhost
    CREATE DATABASE IF NOT EXISTS phpmyadmin;
    CREATE USER IF NOT EXISTS '${pma_user}'@'%';
    SET PASSWORD FOR '${pma_user}'@'%' = PASSWORD('${pma_pass}');
    GRANT ALL PRIVILEGES ON *.* TO '${pma_user}'@'%' WITH GRANT OPTION;
EOSQL

PMA_USER
    else
        [ "${pma_dbuser:-}" ] || echo 'pma_dbuser not defined: connection to MYSQL not created'
        [ "${pma_dbpass:-}" ] || echo 'pma_dbpass not defined: connection to MYSQL not created'
    fi
    touch "$isIinitialized"
fi

# perform common
if deploy.isValidService 'nginx' && [ -d "${config_dir}/nginx.conf" ]; then
    sudo mkdir -p "${WORKSPACE_DIR}/nginx/conf.d/"
    sudo cp -ru "${config_dir}/nginx.conf"/* "${WORKSPACE_DIR}/nginx/conf.d/"
    [ -d "${workspace_dir}/nginx.conf" ] && sudo rm -rf "${workspace_dir}/nginx.conf"
fi
exit 0
