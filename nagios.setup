#!/bin/bash

#############################################################################
#
#   initialization for nagios
#
#############################################################################

[ "${CONFIG_DIR:-}" ] || CONFIG_DIR="$(pwd)"
[ "${WORKSPACE_DIR:-}" ] || WORKSPACE_DIR="$(pwd)/workspace.$(basename "$CONFIG_DIR")"

declare -r config_dir="${CONFIG_DIR:?}/nagios"
declare -r workspace_dir="${WORKSPACE_DIR:?}/nagios"
declare NagiosConfig="${workspace_dir}/config/NagiosConfig.tgz"


declare isIinitialized="$(basename "${BASH_SOURCE[0]}")"
isIinitialized="${workspace_dir}/.${isIinitialized%.*}.init"
if [ ! -f "$isIinitialized" ]; then

    # perform initialization 
    mkdir -p "$workspace_dir" ||: 

    if [ ! -f "$NagiosConfig" ]; then
        mkdir -p "${workspace_dir}/archives" ||:
        [ -e "${config_dir}/NagiosConfig.tgz" ] && cp "${config_dir}/NagiosConfig.tgz" "$NagiosConfig" 
    fi

    declare dumps_dir="${WORKSPACE_DIR}/mysql/loader/dumps"
    if [ ! -e "${dumps_dir}/nconf.sql" ]; then
        mkdir -p "$dumps_dir" ||:
        cp "${config_dir}/nconf.sql" "${dumps_dir}/nconf.sql"
    fi

    declare -r mysql_root_password="$(deploy.passwordSecret 'mysql' 'MYSQL_ROOT_PASSWORD' )"
    declare -r nconf_dbpass="$(deploy.passwordSecret 'nagios' 'NCONF_DBPASS' )"

    # determine nconf dbuser
    declare -r dc_json="$(lib.yamlToJson "${WORKSPACE_DIR}/docker-compose.yml")"
    declare nconf_dbuser=$(jq --compact-output --monochrome-output --raw-output '.services.nagios.environment.NCONF_DBUSER' <<< "$dc_json")
    nconf_dbuser="$(eval echo "$nconf_dbuser")"

    cat <<-NCONF_DBUSER > "${WORKSPACE_DIR}/mysql/loader/nconf_user.sh"
#!/bin/bash

cat <<-EOSQL | mysql -uroot -p${mysql_root_password} -hlocalhost
    CREATE DATABASE IF NOT EXISTS nconf;
    CREATE USER IF NOT EXISTS '${nconf_dbuser}'@'%';
    SET PASSWORD FOR '${nconf_dbuser}'@'%' = PASSWORD('${nconf_dbpass}');
    GRANT ALL ON nconf.* TO '${nconf_dbuser}'@'%';
EOSQL

NCONF_DBUSER

    touch "$isIinitialized"
fi

# perform common
if deploy.isValidService 'nginx' && [ -d "${config_dir}/nginx.conf" ]; then
    sudo mkdir -p "${WORKSPACE_DIR}/nginx/conf.d/"
    sudo cp -ru "${config_dir}/nginx.conf"/* "${WORKSPACE_DIR}/nginx/conf.d/"
fi

if [ "${config_dir}/NagiosConfig.tgz" -nt "$NagiosConfig" ]; then
    echo "    Updating $NagiosConfig" >&2
    sudo cp "${config_dir}/NagiosConfig.tgz" "$NagiosConfig" 
    [ -d "${workspace_dir}/nginx.conf" ] && sudo rm -rf "${workspace_dir}/nginx.conf"
fi
exit 0
