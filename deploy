#!/bin/bash

declare TOP

#----------------------------------------------------------------------------------------------
function my.usage()
{
    local -i exit_status=${1:-1}

    cat >&2 << EOF
Usage:
    $progname [ -h|--help ] | [ --clean ] | [ --init ] [ --latest ]

    Common options:
        -h --help              Display a basic set of usage instructions
        -c --clean             0:do not clean environment
                               1:clean environment before build (default)
        -i --init              only initialize the environment
        -l --latest            update to latest versions of jars rather than using those defined in docker-compose.yml

EOF
    exit "$exit_status"
}
export -f my.usage

#----------------------------------------------------------------------------------------------
function my.cmdLineArgs()
{
    local base="${1:?}"
    shift
    local usage='my.usage'

    # Parse command-line options into above variable
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "help,Help,HELP,clean,init,latest" --options "Hhcil" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=()
    [ "$base" ] && opts['base']="$base" 
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            -c|--c|--clean)       opts['clean']=1; shift;;
            -i|--i|--init)        opts['init']=1; shift;;
            -l|--l|--latest)      opts['latest']=1; shift;;
            --)                   shift; break;;
        esac
    done
    
    local val
    if [ ${#opts[*]} -gt 0 ]; then
        local -i i=0
        for val in "${!opts[@]}"; do
            [ $(( i++ )) -gt 0 ] && echo -n ' '
            printf '['\''%s'\'']='\''%s'\' "$val" "${opts[$val]}"
        done
    fi
    echo
    if [ $# -gt 0 ]; then
        for val in "$@"; do
            echo "$val"
        done
    fi
}
export -f my.cmdLineArgs

#----------------------------------------------------------------------------------------------
function my.loadLibs()
{
    local fn="${1:?}"

    if [ "$(env | grep -c "BASH_FUNC_${fn}%%")" -eq 0 ]; then
        top="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
        if [ "$top" = '/usr/local/bin' ] && [ -e /usr/local/crf/bin/loadLibraries.sh ]; then       
            source /usr/local/crf/bin/loadLibraries.sh
            TOP=/opt
        elif [ -e "${top}/libs/loadLibraries.sh" ]; then
            source "${top}/libs/loadLibraries.sh"
            TOP="$top"
            environ.container
        else
            echo '***ERROR unable to locate libraries'; exit 1
        fi
    fi
}
export -f my.loadLibs

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=deploy.main

my.loadLibs "$fn"
: ${BASE_TAG:=latest}
args=( $( my.cmdLineArgs "$TOP" "$@" ) ) && status=$? || status=$?
[ $status -eq 0 ] && "$fn" "${args[@]}" 
